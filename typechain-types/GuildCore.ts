/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type GuildCoreInfoStruct = {
    guildId: BigNumberish;
    landTokenId: BigNumberish;
    name: string;
    symbol: string;
    logo: string;
  };

  export type GuildCoreInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    guildId: BigNumber;
    landTokenId: BigNumber;
    name: string;
    symbol: string;
    logo: string;
  };
}

export interface GuildCoreInterface extends utils.Interface {
  contractName: "GuildCore";
  functions: {
    "_guildFactory()": FunctionFragment;
    "_guildToken()": FunctionFragment;
    "_owner()": FunctionFragment;
    "addTrusted(address)": FunctionFragment;
    "getUserReferralCode(address)": FunctionFragment;
    "initialize(address,address,(uint256,uint256,string,string,string),uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTrusted(address)": FunctionFragment;
    "requestJoin(address,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_guildFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_guildToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "addTrusted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserReferralCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, DataTypes.GuildCoreInfoStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTrusted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestJoin",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_guildFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_guildToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GuildCore extends BaseContract {
  contractName: "GuildCore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GuildCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _guildFactory(overrides?: CallOverrides): Promise<[string]>;

    _guildToken(overrides?: CallOverrides): Promise<[string]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserReferralCode(
      user_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      owner_: string,
      guildTokenAddr: string,
      info: DataTypes.GuildCoreInfoStruct,
      monsters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestJoin(
      requester: string,
      referrer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _guildFactory(overrides?: CallOverrides): Promise<string>;

  _guildToken(overrides?: CallOverrides): Promise<string>;

  _owner(overrides?: CallOverrides): Promise<string>;

  addTrusted(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserReferralCode(
    user_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    owner_: string,
    guildTokenAddr: string,
    info: DataTypes.GuildCoreInfoStruct,
    monsters: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeTrusted(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestJoin(
    requester: string,
    referrer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _guildFactory(overrides?: CallOverrides): Promise<string>;

    _guildToken(overrides?: CallOverrides): Promise<string>;

    _owner(overrides?: CallOverrides): Promise<string>;

    addTrusted(user: string, overrides?: CallOverrides): Promise<void>;

    getUserReferralCode(
      user_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      owner_: string,
      guildTokenAddr: string,
      info: DataTypes.GuildCoreInfoStruct,
      monsters: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeTrusted(user: string, overrides?: CallOverrides): Promise<void>;

    requestJoin(
      requester: string,
      referrer: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _guildFactory(overrides?: CallOverrides): Promise<BigNumber>;

    _guildToken(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserReferralCode(
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner_: string,
      guildTokenAddr: string,
      info: DataTypes.GuildCoreInfoStruct,
      monsters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestJoin(
      requester: string,
      referrer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _guildFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _guildToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserReferralCode(
      user_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner_: string,
      guildTokenAddr: string,
      info: DataTypes.GuildCoreInfoStruct,
      monsters: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestJoin(
      requester: string,
      referrer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
