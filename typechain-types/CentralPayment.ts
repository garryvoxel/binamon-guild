/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CentralPaymentInterface extends utils.Interface {
  contractName: "CentralPayment";
  functions: {
    "BMONC_ADDRESS()": FunctionFragment;
    "BMON_V_BNB()": FunctionFragment;
    "BNB_V_BUSD()": FunctionFragment;
    "addTrusted(address)": FunctionFragment;
    "distributeForBreedFee(address,address,address,address,uint256)": FunctionFragment;
    "getBmonUsdPrice()": FunctionFragment;
    "getGenesisMonsterPrice(uint256,uint256)": FunctionFragment;
    "getGuildOwnerMintAmount(uint256[],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTrusted(address)": FunctionFragment;
    "setBoosterPrice(uint256)": FunctionFragment;
    "setBreedFeePercent(uint256[])": FunctionFragment;
    "setMultiplier(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BMONC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BMON_V_BNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BNB_V_BUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addTrusted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distributeForBreedFee",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBmonUsdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGenesisMonsterPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuildOwnerMintAmount",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTrusted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBoosterPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedFeePercent",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BMONC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BMON_V_BNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BNB_V_BUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeForBreedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBmonUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGenesisMonsterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuildOwnerMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoosterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CentralPayment extends BaseContract {
  contractName: "CentralPayment";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CentralPaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BMONC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    BMON_V_BNB(overrides?: CallOverrides): Promise<[string]>;

    BNB_V_BUSD(overrides?: CallOverrides): Promise<[string]>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeForBreedFee(
      _guildOwner: string,
      _parentA: string,
      _parentB: string,
      _referral: string,
      breedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBmonUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGenesisMonsterPrice(
      tokenId: BigNumberish,
      bmonUSDPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGuildOwnerMintAmount(
      genesisMonsters: BigNumberish[],
      lockingBmonAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoosterPrice(
      boosterPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedFeePercent(
      _bfPercent: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiplier(
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BMONC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  BMON_V_BNB(overrides?: CallOverrides): Promise<string>;

  BNB_V_BUSD(overrides?: CallOverrides): Promise<string>;

  addTrusted(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeForBreedFee(
    _guildOwner: string,
    _parentA: string,
    _parentB: string,
    _referral: string,
    breedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBmonUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getGenesisMonsterPrice(
    tokenId: BigNumberish,
    bmonUSDPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGuildOwnerMintAmount(
    genesisMonsters: BigNumberish[],
    lockingBmonAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeTrusted(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoosterPrice(
    boosterPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedFeePercent(
    _bfPercent: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiplier(
    multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BMONC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    BMON_V_BNB(overrides?: CallOverrides): Promise<string>;

    BNB_V_BUSD(overrides?: CallOverrides): Promise<string>;

    addTrusted(user: string, overrides?: CallOverrides): Promise<void>;

    distributeForBreedFee(
      _guildOwner: string,
      _parentA: string,
      _parentB: string,
      _referral: string,
      breedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBmonUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGenesisMonsterPrice(
      tokenId: BigNumberish,
      bmonUSDPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuildOwnerMintAmount(
      genesisMonsters: BigNumberish[],
      lockingBmonAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeTrusted(user: string, overrides?: CallOverrides): Promise<void>;

    setBoosterPrice(
      boosterPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBreedFeePercent(
      _bfPercent: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplier(
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BMONC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    BMON_V_BNB(overrides?: CallOverrides): Promise<BigNumber>;

    BNB_V_BUSD(overrides?: CallOverrides): Promise<BigNumber>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeForBreedFee(
      _guildOwner: string,
      _parentA: string,
      _parentB: string,
      _referral: string,
      breedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBmonUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getGenesisMonsterPrice(
      tokenId: BigNumberish,
      bmonUSDPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuildOwnerMintAmount(
      genesisMonsters: BigNumberish[],
      lockingBmonAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoosterPrice(
      boosterPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedFeePercent(
      _bfPercent: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiplier(
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BMONC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BMON_V_BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BNB_V_BUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeForBreedFee(
      _guildOwner: string,
      _parentA: string,
      _parentB: string,
      _referral: string,
      breedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBmonUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGenesisMonsterPrice(
      tokenId: BigNumberish,
      bmonUSDPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuildOwnerMintAmount(
      genesisMonsters: BigNumberish[],
      lockingBmonAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrusted(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoosterPrice(
      boosterPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedFeePercent(
      _bfPercent: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiplier(
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
