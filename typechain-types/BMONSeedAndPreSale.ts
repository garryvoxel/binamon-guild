/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BMONSeedAndPreSaleInterface extends utils.Interface {
  contractName: "BMONSeedAndPreSale";
  functions: {
    "DELAY_BEFORE_PRESALE()": FunctionFragment;
    "PRESALE_DURATION()": FunctionFragment;
    "PRESALE_MAX_BUY()": FunctionFragment;
    "PRESALE_MIN_BUY()": FunctionFragment;
    "PRESALE_PRICE()": FunctionFragment;
    "PRESALE_TOKENS()": FunctionFragment;
    "SEED_DURATION()": FunctionFragment;
    "SEED_MAX_BUY()": FunctionFragment;
    "SEED_MIN_BUY()": FunctionFragment;
    "SEED_PRICE()": FunctionFragment;
    "SEED_TOKENS()": FunctionFragment;
    "benificiary()": FunctionFragment;
    "buyTokens()": FunctionFragment;
    "closePreSale()": FunctionFragment;
    "getSalesAtPresale(address)": FunctionFragment;
    "getSalesAtSeed(address)": FunctionFragment;
    "getState()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesAtPresale(address)": FunctionFragment;
    "salesAtSeed(address)": FunctionFragment;
    "setStartTime(uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "token()": FunctionFragment;
    "totalPresaleBnbCollected()": FunctionFragment;
    "totalPresaleTokensSold()": FunctionFragment;
    "totalSeedBnbCollected()": FunctionFragment;
    "totalSeedTokensSold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELAY_BEFORE_PRESALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_MAX_BUY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_MIN_BUY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_MAX_BUY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_MIN_BUY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "benificiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesAtPresale",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesAtSeed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesAtPresale",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "salesAtSeed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPresaleBnbCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPresaleTokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeedBnbCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeedTokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELAY_BEFORE_PRESALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_MAX_BUY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_MIN_BUY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEED_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEED_MAX_BUY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEED_MIN_BUY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SEED_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEED_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "benificiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalesAtPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalesAtSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesAtPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesAtSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPresaleBnbCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPresaleTokensSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSeedBnbCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSeedTokensSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BMONSeedAndPreSale extends BaseContract {
  contractName: "BMONSeedAndPreSale";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BMONSeedAndPreSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELAY_BEFORE_PRESALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_MAX_BUY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_MIN_BUY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEED_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEED_MAX_BUY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEED_MIN_BUY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEED_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SEED_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    benificiary(overrides?: CallOverrides): Promise<[string]>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSalesAtPresale(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSalesAtSeed(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getState(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesAtPresale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    salesAtSeed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalPresaleBnbCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPresaleTokensSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSeedBnbCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSeedTokensSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DELAY_BEFORE_PRESALE(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  benificiary(overrides?: CallOverrides): Promise<string>;

  buyTokens(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePreSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSalesAtPresale(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSalesAtSeed(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getState(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesAtPresale(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  salesAtSeed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setStartTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalPresaleBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

  totalPresaleTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  totalSeedBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

  totalSeedTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELAY_BEFORE_PRESALE(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    benificiary(overrides?: CallOverrides): Promise<string>;

    buyTokens(overrides?: CallOverrides): Promise<void>;

    closePreSale(overrides?: CallOverrides): Promise<void>;

    getSalesAtPresale(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalesAtSeed(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesAtPresale(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    salesAtSeed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setStartTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalPresaleBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalPresaleTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeedBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeedTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DELAY_BEFORE_PRESALE(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_MAX_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_MIN_BUY(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    benificiary(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSalesAtPresale(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalesAtSeed(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesAtPresale(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    salesAtSeed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalPresaleBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalPresaleTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeedBnbCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeedTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELAY_BEFORE_PRESALE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRESALE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_MAX_BUY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_MIN_BUY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_MAX_BUY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_MIN_BUY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    benificiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePreSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSalesAtPresale(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSalesAtSeed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesAtPresale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salesAtSeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPresaleBnbCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPresaleTokensSold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSeedBnbCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSeedTokensSold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
