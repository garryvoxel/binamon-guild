/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Errors, ErrorsInterface } from "../Errors";

const _abi = [
  {
    inputs: [],
    name: "GC_FORBIDDEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_ALREADY_SUBSCRIBED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_DUPLICATE_GUILD_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_DUPLICATE_GUILD_SYMBOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_NOT_ENOUGH_MIN_BMON_LOCKING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_NOT_ENOUGH_YOUR_BALANCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_NOT_OWNED_GENESIS_MONSTER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_NOT_OWNED_LAND",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GF_OWNER_MONSTER_AMOUNT",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61026161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c806375f0a2d81161007057806375f0a2d81461013857806388757dfe14610158578063996b7b5a14610178578063a0660e5014610198578063f2ed8110146101b857600080fd5b80631b153deb146100a25780633006f6a9146100d85780633df8c1af146100f857806345b7dbcf14610118575b600080fd5b6100c2604051806040016040528060018152602001601960f91b81525081565b6040516100cf91906101d8565b60405180910390f35b6100c2604051806040016040528060018152602001603160f81b81525081565b6100c2604051806040016040528060018152602001603360f81b81525081565b6100c2604051806040016040528060018152602001603960f81b81525081565b6100c2604051806040016040528060018152602001600d60fa1b81525081565b6100c2604051806040016040528060018152602001603560f81b81525081565b6100c2604051806040016040528060018152602001600760fb1b81525081565b6100c2604051806040016040528060018152602001603760f81b81525081565b6100c2604051806040016040528060018152602001601b60f91b81525081565b6000602080835283518082850152825b81811015610204578581018301518582016040015282016101e8565b818111156102155783604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212205e342543e3ee03592be270e6814acbfe00c6874dd7154bdffb22da22e36f47dd64736f6c63430008040033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Errors";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }
  static readonly contractName: "Errors";
  public readonly contractName: "Errors";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
