/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GuildCore, GuildCoreInterface } from "../GuildCore";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_guildFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_guildToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "addTrusted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
    ],
    name: "getUserReferralCode",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "guildTokenAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "guildId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "landTokenId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "logo",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.GuildCoreInfo",
        name: "info",
        type: "tuple",
      },
      {
        internalType: "uint256[]",
        name: "monsters",
        type: "uint256[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "removeTrusted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "referrer",
        type: "bytes32",
      },
    ],
    name: "requestJoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008054336001600160a01b03199182168117835560028054909216179055610d2190819061004090396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b2bdfa7b11610066578063b2bdfa7b1461012b578063b3b0c7591461013e578063d4d0d6e614610151578063d55e62a014610164578063f2fde38b1461017757600080fd5b80630198a1c9146100a35780634cf2b775146100d35780637e134d82146100f357806383b9b4b2146101065780638da5cb5b1461011a575b600080fd5b6002546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e13660046108be565b61018a565b6040516100ca9190610b0c565b6003546100b6906001600160a01b031681565b6101186101143660046109e7565b5050565b005b6000546001600160a01b03166100b6565b6004546100b6906001600160a01b031681565b61011861014c3660046108df565b610236565b61011861015f3660046108be565b610346565b6101186101723660046108be565b610397565b6101186101853660046108be565b6103e2565b6001600160a01b0381166000908152600c602052604090208054606091906101b190610c3f565b80601f01602080910402602001604051908101604052809291908181526020018280546101dd90610c3f565b801561022a5780601f106101ff5761010080835404028352916020019161022a565b820191906000526020600020905b81548152906001019060200180831161020d57829003601f168201915b50505050509050919050565b6002546001600160a01b0316336001600160a01b031614604051806040016040528060018152602001603960f81b8152509061028e5760405162461bcd60e51b81526004016102859190610b0c565b60405180910390fd5b50600480546001600160a01b038087166001600160a01b031992831617909255600380549286169290911691909117905581516005908155602080840151600655604084015180518593926102e8926007929101906106e1565b50606082015180516103049160038401916020909101906106e1565b50608082015180516103209160048401916020909101906106e1565b505081516103369150600a906020840190610765565b5061034084610484565b50505050565b6000546001600160a01b031633146103705760405162461bcd60e51b815260040161028590610b3f565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031633146103c15760405162461bcd60e51b815260040161028590610b3f565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b0316331461040c5760405162461bcd60e51b815260040161028590610b3f565b6001600160a01b0381166104625760405162461bcd60e51b815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610285565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600d54610492906001610bd0565b600d8190556000906008906104a69061053e565b6040516020016104b7929190610ada565b60408051601f198184030181529082905291506000906104e09084906007904390602001610aa8565b60408051808303601f1901815291815281516020928301206000818152600b845282812080546001600160a01b0319166001600160a01b0389169081179091558152600c8452919091208451919350610340929091908501906106e1565b60608161056757505060408051808201909152600681526503030303030360d41b602082015290565b8160005b8115610591578061057b81610c7a565b915061058a9050600a83610be8565b915061056b565b6000600682116105a3575060066105a6565b50805b8060008167ffffffffffffffff8111156105d057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105fa576020820181803683370190505b5090505b86156106735761060f600183610bfc565b915061061c600a88610c95565b610627906030610bd0565b60f81b81838151811061064a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061066c600a88610be8565b96506105fe565b600091505b6106828484610bfc565b8210156106d757603060f81b8183815181106106ae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350816106cf81610c7a565b925050610678565b9695505050505050565b8280546106ed90610c3f565b90600052602060002090601f01602090048101928261070f5760008555610755565b82601f1061072857805160ff1916838001178555610755565b82800160010185558215610755579182015b8281111561075557825182559160200191906001019061073a565b5061076192915061079f565b5090565b828054828255906000526020600020908101928215610755579160200282018281111561075557825182559160200191906001019061073a565b5b8082111561076157600081556001016107a0565b80356001600160a01b03811681146107cb57600080fd5b919050565b600082601f8301126107e0578081fd5b8135602067ffffffffffffffff8211156107fc576107fc610cd5565b8160051b61080b828201610b9f565b838152828101908684018388018501891015610825578687fd5b8693505b85841015610847578035835260019390930192918401918401610829565b50979650505050505050565b600082601f830112610863578081fd5b813567ffffffffffffffff81111561087d5761087d610cd5565b610890601f8201601f1916602001610b9f565b8181528460208386010111156108a4578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156108cf578081fd5b6108d8826107b4565b9392505050565b600080600080608085870312156108f4578283fd5b6108fd856107b4565b935061090b602086016107b4565b9250604085013567ffffffffffffffff80821115610927578384fd5b9086019060a0828903121561093a578384fd5b610942610b76565b8235815260208301356020820152604083013582811115610961578586fd5b61096d8a828601610853565b604083015250606083013582811115610984578586fd5b6109908a828601610853565b6060830152506080830135828111156109a7578586fd5b6109b38a828601610853565b608083015250935060608701359150808211156109ce578283fd5b506109db878288016107d0565b91505092959194509250565b600080604083850312156109f9578182fd5b610a02836107b4565b946020939093013593505050565b8054600090600181811c9080831680610a2a57607f831692505b6020808410821415610a4a57634e487b7160e01b86526022600452602486fd5b818015610a5e5760018114610a6f57610a9c565b60ff19861689528489019650610a9c565b60008881526020902060005b86811015610a945781548b820152908501908301610a7b565b505084890196505b50505050505092915050565b6bffffffffffffffffffffffff198460601b1681526000610acc6014830185610a10565b928352505060200192915050565b6000610ae68285610a10565b602d60f81b81528351610b00816001840160208801610c13565b01600101949350505050565b6020815260008251806020840152610b2b816040850160208701610c13565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b60405160a0810167ffffffffffffffff81118282101715610b9957610b99610cd5565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc857610bc8610cd5565b604052919050565b60008219821115610be357610be3610ca9565b500190565b600082610bf757610bf7610cbf565b500490565b600082821015610c0e57610c0e610ca9565b500390565b60005b83811015610c2e578181015183820152602001610c16565b838111156103405750506000910152565b600181811c90821680610c5357607f821691505b60208210811415610c7457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610c8e57610c8e610ca9565b5060010190565b600082610ca457610ca4610cbf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122031d35b01f7f6fdd3a3231dd5add72c641a4331d2dc9ed0d65877d7837173a7c764736f6c63430008040033";

type GuildCoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GuildCoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GuildCore__factory extends ContractFactory {
  constructor(...args: GuildCoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GuildCore";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GuildCore> {
    return super.deploy(overrides || {}) as Promise<GuildCore>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GuildCore {
    return super.attach(address) as GuildCore;
  }
  connect(signer: Signer): GuildCore__factory {
    return super.connect(signer) as GuildCore__factory;
  }
  static readonly contractName: "GuildCore";
  public readonly contractName: "GuildCore";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GuildCoreInterface {
    return new utils.Interface(_abi) as GuildCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GuildCore {
    return new Contract(address, _abi, signerOrProvider) as GuildCore;
  }
}
