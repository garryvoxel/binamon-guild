/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IGuildFactoryInterface extends utils.Interface {
  contractName: "IGuildFactory";
  functions: {
    "getGuildAddress(uint256)": FunctionFragment;
    "isAlreadySubscribedGuild(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGuildAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAlreadySubscribedGuild",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGuildAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAlreadySubscribedGuild",
    data: BytesLike
  ): Result;

  events: {
    "GuildCreated(bool,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GuildCreated"): EventFragment;
}

export type GuildCreatedEvent = TypedEvent<
  [boolean, string, BigNumber],
  { sucess: boolean; owner: string; guildId: BigNumber }
>;

export type GuildCreatedEventFilter = TypedEventFilter<GuildCreatedEvent>;

export interface IGuildFactory extends BaseContract {
  contractName: "IGuildFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGuildFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGuildAddress(
      guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAlreadySubscribedGuild(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getGuildAddress(
    guildId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isAlreadySubscribedGuild(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getGuildAddress(
      guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isAlreadySubscribedGuild(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "GuildCreated(bool,address,uint256)"(
      sucess?: null,
      owner?: string | null,
      guildId?: null
    ): GuildCreatedEventFilter;
    GuildCreated(
      sucess?: null,
      owner?: string | null,
      guildId?: null
    ): GuildCreatedEventFilter;
  };

  estimateGas: {
    getGuildAddress(
      guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAlreadySubscribedGuild(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGuildAddress(
      guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAlreadySubscribedGuild(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
